{"version":3,"sources":["Tracker.js","App.js","serviceWorker.js","index.js"],"names":["startDate","Date","endDate","Tracker","props","state","level","getLevel","className","this","interval","setInterval","setState","clearInterval","React","Component","TrackerBar","margin","value","parseInt","ProgressBar","striped","animated","variant","now","label","interval2","updateValue","Math","PI","sin","totalTime","currentTime","abs","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4UAIIA,G,MAAY,IAAIC,KAAK,KAAM,EAAG,IAC9BC,EAAU,IAAID,KAAK,KAAM,EAAG,GAE1BE,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAOC,KAHQ,E,sEAQjB,OACE,yBAAKC,UAAY,WACf,kBAAC,EAAD,S,0CAKe,IAAD,OAClBC,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAACN,MAAOC,QAAc,O,6CAItEM,cAAcJ,KAAKC,c,GArBDI,IAAMC,WAyBtBC,E,YAEJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAOC,IACPU,OAAQ,EACRC,MAAOC,SAASZ,MALD,E,sEAUjB,OACE,6BACE,kBAACa,EAAA,EAAD,CAAaC,SAAO,EAACC,UAAQ,EAACC,QAAQ,OAAOC,IAAOf,KAAKJ,MAAMa,MAAOO,MAAOhB,KAAKJ,MAAMC,W,0CAKzE,IAAD,OAClBG,KAAKC,SAAWC,aAAY,kBAAM,EAAKC,SAAS,CAACN,MAAOC,QAAc,KACtEE,KAAKiB,UAAYf,aAAY,kBAAM,EAAKgB,gBAAe,M,6CAIvDd,cAAcJ,KAAKC,UACnBG,cAAcJ,KAAKiB,a,oCAInBjB,KAAKG,SAAS,CAACK,OAAQR,KAAKJ,MAAMY,OAASW,KAAKC,GAAG,KACnDpB,KAAKG,SAAS,CAACM,MAAOC,SAASV,KAAKJ,MAAMC,OAASsB,KAAKE,IAAIrB,KAAKJ,MAAMY,c,GA/BlDH,IAAMC,WAmC/B,SAASR,IACP,IAAIwB,EAAY7B,EAAUF,EACtBgC,EAAc/B,KAAKuB,MAAQxB,EAC/B,OAAO4B,KAAKK,IAAWD,EAAcD,EAArB,KAAiCG,QAAQ,GAG5C/B,QCvDAgC,MAdf,WACE,OACE,yBAAK3B,UAAU,OACb,4BAAQA,UAAU,cAChB,8EACkD,6BADlD,YAIA,kBAAC,EAAD,SCAY4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b915eb93.chunk.js","sourcesContent":["import React from 'react';\r\nimport ProgressBar from 'react-bootstrap/ProgressBar'\r\nimport './scss/Tracker.scss'\r\n\r\nvar startDate = new Date(2020, 3, 8);\r\nvar endDate = new Date(2020, 5, 3);\r\n\r\nclass Tracker extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      level: getLevel()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className = \"Tracker\">\r\n        <TrackerBar />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.setState({level: getLevel()}), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n  }\r\n}\r\n\r\nclass TrackerBar extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      level: getLevel(),\r\n      margin: 0,\r\n      value: parseInt(getLevel())\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <ProgressBar striped animated variant=\"dark\" now = {this.state.value} label={this.state.level} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.interval = setInterval(() => this.setState({level: getLevel()}), 1000);\r\n    this.interval2 = setInterval(() => this.updateValue(), 50);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.interval);\r\n    clearInterval(this.interval2);\r\n  }\r\n\r\n  updateValue() {\r\n    this.setState({margin: this.state.margin + Math.PI/36});\r\n    this.setState({value: parseInt(this.state.level) + Math.sin(this.state.margin)});\r\n  }\r\n}\r\n\r\nfunction getLevel() {\r\n  var totalTime = endDate - startDate;\r\n  var currentTime = Date.now() - startDate;\r\n  return Math.abs(100 * (currentTime / totalTime)).toFixed(2);\r\n}\r\n\r\nexport default Tracker;\r\n","import React from 'react';\r\nimport './css/App.css';\r\nimport Tracker from './Tracker';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <p>\r\n          Call of Duty: Modern Warfare Battlepass Tracker <br />\r\n          Season 3\r\n        </p>\r\n        <Tracker />\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}